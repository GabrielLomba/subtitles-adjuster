{"version":3,"sources":["SrtFileService.js","App.js","index.js"],"names":["HOUR_MINUTE_SECONDS_LIMIT","MILLISSECONDS_LIMIT","SRT_TIMING_REGEX","isTimingLine","line","trim","match","getAdjustedTime","timeStr","msChange","timeParts","split","map","Number","carry","limit","i","length","Math","floor","_timeParts","Object","slicedToArray","hour","minutes","seconds","millisseconds","paddedHour","String","padStart","paddedMinutes","paddedSeconds","paddedMillisseconds","concat","getFormattedTime","processTimingChange","fileData","timingMsChange","fileLines","parts","_parts","beginning","end","join","MAX_TIMING_CHANGE","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetGeneralState","setState","error","strProcessedData","resetFileState","srtFileName","srtFileData","handleChosenFile","file","name","fileReader","FileReader","onloadend","result","onerror","readAsText","handleTimingChange","newTimingChange","timingChange","validateInput","state","Error","processDataIfValid","err","message","getProcessedFileName","_this$state","slice","lastIndexOf","_this2","_this$state2","react_default","a","createElement","className","type","accept","onChange","ev","target","files","max","value","onClick","react_download_default","content","href","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.eca8a1c5.chunk.js","sourcesContent":["const HOUR_MINUTE_SECONDS_LIMIT = 60;\r\nconst MILLISSECONDS_LIMIT = 1000;\r\n\r\nconst SRT_TIMING_REGEX = /^\\d\\d:[0-5]\\d:[0-5]\\d,\\d\\d\\d --> \\d\\d:[0-5]\\d:[0-5]\\d,\\d\\d\\d$/;\r\n\r\nfunction isTimingLine(line) {\r\n  return line.trim().match(SRT_TIMING_REGEX);\r\n}\r\n\r\nfunction getFormattedTime(timeParts) {\r\n  const [hour, minutes, seconds, millisseconds] = timeParts;\r\n\r\n  const paddedHour = String(hour).padStart(2, '0');\r\n  const paddedMinutes = String(minutes).padStart(2, '0');\r\n  const paddedSeconds = String(seconds).padStart(2, '0');\r\n  const paddedMillisseconds = String(millisseconds).padStart(3, '0');\r\n\r\n  return `${paddedHour}:${paddedMinutes}:${paddedSeconds},${paddedMillisseconds}`;\r\n}\r\n\r\nfunction getAdjustedTime(timeStr, msChange) {\r\n  const timeParts = timeStr.split(/[:,]/).map(Number);\r\n\r\n  let carry = msChange;\r\n  let limit = MILLISSECONDS_LIMIT;\r\n  let i = timeParts.length - 1;\r\n\r\n  do {\r\n    timeParts[i] += carry;\r\n\r\n    if (timeParts[i] > limit) {\r\n      carry = Math.floor(timeParts[i] / limit);\r\n      timeParts[i] %= limit;\r\n    } else {\r\n      carry = 0;\r\n    }\r\n\r\n    --i;\r\n    limit = HOUR_MINUTE_SECONDS_LIMIT;\r\n  } while (i >= 0 && carry > 0);\r\n\r\n  return getFormattedTime(timeParts);\r\n}\r\n\r\nexport const processTimingChange = (fileData, timingMsChange) => {\r\n  const fileLines = fileData.split('\\n');\r\n\r\n  for (let i = 0; i < fileLines.length; ++i) {\r\n    const line = fileLines[i];\r\n\r\n    if (isTimingLine(line)) {\r\n      const parts = line.split(' ');\r\n      const [beginning, , end] = parts;\r\n\r\n      parts[0] = getAdjustedTime(beginning, timingMsChange);\r\n      parts[2] = getAdjustedTime(end, timingMsChange);\r\n\r\n      fileLines[i] = parts.join(' ');\r\n    }\r\n  }\r\n\r\n  return fileLines.join('\\n');\r\n}\r\n","import React, { Component } from 'react';\n\nimport Download from '@axetroy/react-download';\n\nimport './App.css';\nimport { processTimingChange } from './SrtFileService';\n\nconst MAX_TIMING_CHANGE = 10 * 60 * 60 * 1000;\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      srtFileName: null,\n      srtFileData: null,\n      strProcessedData: null,\n      timingChange: 0,\n      error: ''\n    }\n  }\n\n  resetGeneralState = () => {\n    this.setState({ error: null });\n    this.setState({ strProcessedData: null });\n  }\n\n  resetFileState = () => {\n    this.setState({ srtFileName: null });\n    this.setState({ srtFileData: null });\n  }\n\n  handleChosenFile = (file) => {\n    this.resetGeneralState();\n\n    if (file) {\n      this.setState({ srtFileName: file.name });\n\n      const fileReader = new FileReader();\n      fileReader.onloadend = () => {\n        this.setState({ srtFileData: fileReader.result });\n      }\n      fileReader.onerror = error => {\n        this.setState({ error });\n      }\n\n      fileReader.readAsText(file);\n    } else {\n      this.resetFileState();\n    }\n  }\n\n  handleTimingChange = (newTimingChange) => {\n    this.resetGeneralState();\n    this.setState({ timingChange: Number(newTimingChange) });\n  }\n\n  validateInput = () => {\n    if (!this.state.srtFileData) {\n      throw new Error(\"Please submit a SRT file before applying!\");\n    }\n\n    if (!this.state.timingChange) {\n      throw new Error(\"Please specify a timing change before applying!\");\n    }\n\n    if (this.state.timingChange > MAX_TIMING_CHANGE) {\n      throw new Error(`Please specify a timing change less than or equal to ${MAX_TIMING_CHANGE}!`);\n    }\n  }\n\n  processDataIfValid = () => {\n    try {\n      this.validateInput();\n      const strProcessedData = processTimingChange(this.state.srtFileData, this.state.timingChange);\n      this.setState({ strProcessedData });\n    } catch (err) {\n      this.setState({ error: err.message });\n    }\n  }\n\n  getProcessedFileName = () => {\n    const { srtFileName, timingChange } = this.state;\n\n    const name = srtFileName.slice(0, srtFileName.lastIndexOf('.'));\n\n    return `${name}Processed${timingChange}.srt`;\n  }\n\n  render() {\n    const { error, strProcessedData } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <p className=\"header\">\n            Simple app that adjusts subtitles timing in SRT files. Thanks for using!\n          </p>\n        </header>\n\n        <main>\n\n          <div className=\"file-input\">\n            <label>Select the SRT file:</label>\n            <input type=\"file\" accept=\".srt\" onChange={ev => this.handleChosenFile(ev.target.files[0])} />\n          </div>\n\n          <div className=\"timing-change\">\n            <label>Timing change applied in ms</label>\n            <p className=\"timing-change-explanation\">\n              For instance, if the subtitles are 2 seconds late, put 2000. If they are 1.5 seconds early, put -1500.\n            </p>\n            <input type=\"number\" max={MAX_TIMING_CHANGE} onChange={ev => this.handleTimingChange(ev.target.value)} />\n            <button onClick={this.processDataIfValid}>Proccess!</button>\n\n            {strProcessedData ? (\n              <Download file={this.getProcessedFileName()} content={strProcessedData}>\n                <button type=\"button\">Download processed file!</button>\n              </Download>) : null}\n\n            {error ? <p className=\"error\">{error}</p> : null}\n          </div>\n\n        </main>\n\n        <footer>\n          Let me know if you have any issues <a href=\"https://github.com/GabrielLomba/subtitles-adjuster/issues\">here</a>.\n          Author: <a href=\"https://github.com/GabrielLomba\">Gabriel Lomba</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}